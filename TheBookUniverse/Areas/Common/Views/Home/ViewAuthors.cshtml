@using Models.Authors
@model AuthorsPageModel
@{

    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    ViewData["Title"] = "Authors";
}

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-10">
            <h3>Authors</h3>
            <hr />

            <div class="row p-1 justify-content-center">
                <div class="search-bar col-6 form-group">
                    <form method="get" asp-action="SearchAuthors">
                        <input type="hidden" asp-for="CurrentPage" />
                        <input type="text" asp-for="SearchQuery" placeholder="Search by name" class="form-control">
                        <input type="submit" value="Search" class="btn form-btn">
                    </form>
                </div>
                <div class="row m-2 d-flex justify-content-evenly justify-content-start">
                    @if(Model is null || Model.Authors.Count == 0){
                        <h4>No results</h4>
                    }

                    @foreach (var item in Model.Authors) 
                    {
                        <div class="d-flex m-2 flex-column author-item">
                            <div>
                                <a href="@Url.Action("ViewAuthorDetails", "Home", new { id = item.Id })">
                                    <img src="@Url.Content(item.PictureURL)" alt="@item.Name" class="author-img" title="@item.Name">
                                </a>
                                <span class="text-dark fw-bold font-14">@item.Name</span>
                            </div>
                            <div class="mt-auto">
                                <a asp-action="ViewAuthorDetails" asp-route-id="@item.Id" class="action-btn">
                                    View
                                </a>
                            </div>
                        </div>
                    }
                </div>
            </div>
            @{
                Func<int, string> pageUrl = pageIndex => Url.Action("SearchAuthors", new
                {
                    searchQuery = Model.SearchQuery,
                    startIndex = pageIndex,
                    numberOfObjects = Model.NumberOfAuthorsToDisplayPerPage
                });
            }
            <div class="text-center mb-5">
                @if (Model.TotalNumberOfAuthors > Model.NumberOfAuthorsToDisplayPerPage)
                {
                    int numberOfPages = (int)Math.Ceiling((decimal)Model.TotalNumberOfAuthors / Model.NumberOfAuthorsToDisplayPerPage);
                    if (numberOfPages <= 5)
                    {
                        for (int i = 1; i <= 5; i++)
                        {
                            if (Model.CurrentPage == i)
                            {
                                <a href="@pageUrl(i)" class="btn btn-dark btn-sm">@i</a>
                            }
                            else
                            {
                                <a href="@pageUrl(i)" class="btn btn-secondary btn-sm">@i</a>
                            }
                        }
                    }
                    else
                    {
                        if (Model.CurrentPage < 4)
                        {

                            for (int i = 1; i < 5; i++)
                            {
                                if (Model.CurrentPage == i)
                                {
                                    <a href="@pageUrl(i)" class="btn btn-dark btn-sm">@i</a>
                                }
                                else
                                {
                                    <a href="@pageUrl(i)" class="btn btn-secondary btn-sm">@i</a>
                                }
                            }
                            <span> ... </span>
                            <a href="@pageUrl((int)numberOfPages)" class="btn btn-secondary btn-sm">@(numberOfPages)</a>
                        }
                        else if (Model.CurrentPage >= numberOfPages - 2)
                        {
                            <a href="@pageUrl(1)" class="btn btn-secondary btn-sm">1</a>
                            <span> ... </span>
                            for (int i = (numberOfPages - 3); i <= numberOfPages; i++)
                            {
                                if (Model.CurrentPage == i)
                                {
                                    <a href="@pageUrl(i)" class="btn btn-dark btn-sm">@i</a>

                                }
                                else
                                {
                                    <a href="@pageUrl(i)" class="btn btn-secondary btn-sm">@i</a>
                                }
                            }
                        }
                        else
                        {
                            <a href="@pageUrl(1)" class="btn btn-secondary btn-sm">1</a>
                            <span> ... </span>
                            for (int i = (Model.CurrentPage - 1); i <= Model.CurrentPage + 1; i++)
                            {
                                if (Model.CurrentPage == i)
                                {
                                    <a href="@pageUrl(i)" class="btn btn-dark btn-sm">@i</a>

                                }
                                else
                                {
                                    <a href="@pageUrl(i)" class="btn btn-secondary btn-sm">@i</a>
                                }
                            }
                            <span> ... </span>
                            <a href="@pageUrl((int)numberOfPages)" class="btn btn-secondary btn-sm">@(numberOfPages)</a>
                        }
                    }
                }
            </div>
        </div>
    </div>
</div>